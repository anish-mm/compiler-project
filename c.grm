
%%
%name C
%pos int
%left OR
%left AND
%left EQ NEQ
%left LT GT LEQ GEQ
%left PLUS MINUS
%left DIV MUL MOD

%term
      EOF
    | INT | CHAR
    | ID of string
    | INTVAL of int | STRING of string
    | IF | ELSE | WHILE
    | ASSIGN
    | OR | AND | NOT
    | EQ | NEQ | GT | LT | GEQ | LEQ
    | UMINUS
    | PLUS | MINUS | DIV | MUL | MOD
    | SEMICOLON | COMMA | LCURLY | RCURLY | RPAREN | LPAREN
    | PRINT

%nonterm
      Program of Ast.stmt list | DeclList of Ast.stmt list | Decln of Ast.stmt | TypeSpec of Ast.types | VarDecInit of Ast.stmt |  ExpStmt of Ast.stmt | ComStmt of Ast.stmt | SelStmt of Ast.stmt | ItrStmt of Ast.stmt | Stmt of Ast.stmt | Stmts of Ast.stmt list | Exp of Ast.stmt | SimExp of Ast.stmt | AndExp of Ast.stmt | UnRelExp of Ast.stmt | RelExp of Ast.stmt | SumExp of Ast.stmt | RelOp of Ast.binOp | SumOp of Ast.binOp | Term of Ast.stmt | UnExp of Ast.stmt | MulOp of Ast.binOp | Factor of Ast.stmt | Immut of Ast.stmt | PrntStmt of Ast.stmt

%start Program
%keyword IF WHILE ELSE INT CHAR PRINT
%eop EOF
%noshift EOF
%prefer ELSE
%nodefault
%verbose

%%

Program : DeclList Stmts (DeclList @ Stmts)

DeclList : Decln DeclList (Decln::DeclList)
	 |  	          ([])

Decln : TypeSpec VarDecInit SEMICOLON (Ast.DeclStmt(TypeSpec, VarDecInit))

VarDecInit : ID (Ast.Variable(Ast.Var(ID)))
	   | ID ASSIGN SimExp (Ast.AssignStmt(Ast.Var(ID), SimExp))

TypeSpec : INT  (Ast.INT)
         | CHAR (Ast.CHAR)

Stmts : Stmt Stmts (Stmt::Stmts)
      |            ([])

Stmt : ExpStmt  (ExpStmt)
     | ComStmt  (ComStmt)
     | SelStmt  (SelStmt)
     | ItrStmt  (ItrStmt)
     | PrntStmt (PrntStmt)

ExpStmt : Exp SEMICOLON        (Exp)
        | SEMICOLON            (Ast.EmptyStmt)

SelStmt : IF LPAREN SimExp RPAREN Stmt ELSE Stmt (Ast.IfStmt(SimExp, Stmt1, Stmt2))
        | IF LPAREN SimExp RPAREN Stmt  (Ast.IfStmt(SimExp, Stmt, Ast.EmptyStmt))

ItrStmt : WHILE LPAREN SimExp RPAREN ComStmt (Ast.WhileStmt(SimExp, ComStmt))

PrntStmt : PRINT LPAREN Factor RPAREN SEMICOLON (Ast.PrintStmt(Factor))

ComStmt : LCURLY Stmts RCURLY (Ast.CompStmt(Stmts))

Exp : ID ASSIGN Exp (Ast.AssignStmt(Ast.Var(ID), Exp))
    | SimExp        (SimExp)

SimExp : AndExp OR SimExp (Ast.BinOpStmt(AndExp, Ast.Or, SimExp))
       | AndExp           (AndExp)

AndExp : UnRelExp AND AndExp (Ast.BinOpStmt(UnRelExp, Ast.And, AndExp))
       | UnRelExp            (UnRelExp)

UnRelExp : NOT UnRelExp (Ast.UnOpStmt(Ast.Not, UnRelExp))
         | RelExp       (RelExp)

RelExp : SumExp RelOp SumExp    (Ast.BinOpStmt(SumExp, RelOp, SumExp))
       | SumExp                 (SumExp)

RelOp   : EQ  (Ast.Eq)
        | NEQ (Ast.Neq)
        | GT  (Ast.Gt)
        | LT  (Ast.Lt)
        | GEQ (Ast.Geq)
        | LEQ (Ast.Leq)

SumExp : Term SumOp SumExp  (Ast.BinOpStmt(Term, SumOp, SumExp))
       | Term               (Term)

SumOp : PLUS    (Ast.Plus)
      | MINUS   (Ast.Minus)

Term : UnExp MulOp Term         (Ast.BinOpStmt(UnExp, MulOp, Term))
     | UnExp                    (UnExp)

MulOp : MUL (Ast.Mul)
      | DIV (Ast.Div)
      | MOD (Ast.Mod)

UnExp : UMINUS UnExp      (Ast.UnOpStmt(Ast.Uminus, UnExp))
      | Factor          (Factor)

Factor : ID     (Ast.Variable(Ast.Var(ID)))
       | Immut  (Immut)

Immut : LPAREN Exp RPAREN (Exp)
      | INTVAL            (Ast.Const(Ast.Integer(INTVAL)))
      | STRING            (Ast.Const(Ast.String(STRING)))
